https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html
https://uwsgi-docs.readthedocs.io/en/latest/Options.html?highlight=manage-script-name


prerequisites for Python
https://geektechstuff.com/2019/01/14/creating-a-virtual-python-environment-python/
https://www.techcoil.com/blog/how-to-use-python-3-virtual-environments-to-run-python-3-applications-on-your-raspberry-pi/

Install PIP
sudo apt install python3-pip
sudo apt install python3-venv

Install virtual environment for my Python application in install app folder

python3 -m venv ./venv

Install in venv The container uWSGI for Flask app.
pip install uwsgi

or


curl http://uwsgi.it/install | bash -s default /tmp/uwsgi


standalone deploy Flask application

uwsgi --socket 127.0.0.1:3031 --wsgi-file myflaskapp.py --callable app

Multi task , monitoring on port 9191 accessed over Telnet
uwsgi --socket 127.0.0.1:3031 --wsgi-file myflaskapp.py --callable app --processes 4 --threads 2 --stats 127.0.0.1:9191

This will spawn 4 processes (each with 2 threads),
a master process (will respawn your processes when they die) and the HTTP router (seen before).

//TODO start uWSGI on restarting system, use systemd configuration

//Run uWSGI as HTTP router
https://flask.palletsprojects.com/en/1.1.x/deploying/uwsgi/
https://uwsgi-docs.readthedocs.io/en/latest/HTTP.html#the-uwsgi-http-https-router

uwsgi --http 127.0.0.1:5000 --module myproject:app

uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app

-s is shortcut for uwsgi-socket


Tutorial
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-20-04
https://www.raspberrypi-spy.co.uk/2018/12/running-flask-under-nginx-raspberry-pi/